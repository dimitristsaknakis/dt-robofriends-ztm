{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","padding","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRobotsChange","searchField","isPending","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobotsR","requestRobotsR","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d14b74ff.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email}) => {\n    return (\n        <div className=\"tc bg-moon-gray dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n            <div className=\"dark-gray\">\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    // // Test out the ErrorBoundary component which encloses CardList (in App)\n    // if (true) {\n    //     throw new Error(\"NoOooOOoOOO!\");\n    // }\n\n    return (\n        <>\n            {\n                // loop through robots to create Card components; using 'map()'\n                // the key prop is so that React can keep track of its array elements\n                robots.map((user, i) => {\n                    return ( // parenthesis when returning on multiple lines\n                        <Card \n                            key={user.id}\n                            id={user.id}\n                            name={user.name}\n                            email={user.email}\n                        />\n                    );\n                })\n            }\n        </>\n    );\n};\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">  {/* Tachyons padding 2 class*/}\n            <input \n                /* adding a class with padding, border, backgrnd color */\n                className=\"pa3 ba b--dark-gray bg-lightest-gray\"\n                type=\"text\"\n                placeholder=\"search robots\"\n                onChange={searchChange} // the event handler in App\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"600px\", padding: \"1rem\"}}>\n            {/* Render whatever children components are enclosed */}\n            {props.children} \n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        // The component's state\n        this.state = {\n            hasError: false\n        };\n    };\n\n    /* componentDidCatch lifecycle hook is similar to 'try/catch' JS block */\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true }); // if error, set 'hasError' to true\n    };\n\n    render() {\n        // if 'hasError' true render a message to user\n        if (this.state.hasError) {\n            return <h1>Oooops. That's not good!</h1>;\n        }\n        // if 'hasError' false render enclosing component(s)\n        return this.props.children;\n    }\n};\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.module.css\";\n\n// Import Redux actions\nimport { setSearchFieldA, requestRobotsA } from \"../actions\";\n\n// Tell App what state to listen to\nconst mapStateToProps = state => {\n    return {\n        // The searchField state slice from the searchRobotsR reducer\n        searchField: state.searchRobotsR.searchField,\n        // The state slice props of the requestRobotsR reducer\n        robots: state.requestRobotsR.robots,\n        isPending: state.requestRobotsR.isPending,\n        error: state.requestRobotsR.error\n    }\n};\n\n// Tell App what Redux dispatch (action) it should listen to\nconst mapDispatchToProps = dispatch => {\n    return {\n        // Accepts an event and returns the result of the dispatch of the\n        // 'setSearchField' action with the input text passed to it, to the reducer\n        onSearchChange: event => dispatch(setSearchFieldA(event.target.value)),\n        // Returns a func (the action). Same as '() => requestRobotsA(dispatch)\n        onRobotsChange: () => dispatch(requestRobotsA()) // action is a HO func\n    }\n};\n\n\nclass App extends Component {\n\n    /* Lifecycle methods */\n    componentDidMount() {        \n        return this.props.onRobotsChange(); // \n    };\n\n    \n    render() {\n        // Destructure from Redux state props\n        const { robots, searchField, isPending, onSearchChange } = this.props;\n\n        // Filter robots array, return names of the ones matching the searchfield\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        // If fetch() hasn't completed/resolved yet, show 'loading' msg\n        return isPending ?\n            <h1 className=\"tc\">Loading...</h1> :\n        (\n            <div className=\"tc\">\n                <h1 className=\"f1\">dt-RoboFriends-ztm</h1>\n                {/* Pass event handler function to SearchBox */}\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        {/* Add CardList; it gets passed a 'robots' prop */}\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n};\n\n// Use Redux naming convention for the connect() HOC parameters\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","/* The Redux actions for dt-robofriends-ztm */\n\nimport { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n\n} from \"./constants\";\n\n// For the search field; 'text' is what the user types in. An object is returned\n// with the text and an action 'type'.\nexport const setSearchFieldA = (text) => ({\n    type: CHANGE_SEARCH_FIELD,  // this is a constant; uppercase by convention\n    payload: text   // data to be sent to the reducer\n});\n\n// Async action (higher order func), fetching from the JSONPlaceholder API url\nexport const requestRobotsA = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING }) // no payload here\n    fetch(\"https://jsonplaceholder.typicode.com/users\") // async call to API\n    .then(response => response.json()) // get JSON from response\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n};\n","/* Contains all constants (action types) */\n\nexport const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\n// For the 3 possible Promise states when fetching the JSONPlaceholder API url\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* The Redux reducers of the dt-robofriends-ztm app */\n\n// Import constants (action types)\nimport { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n\n} from \"./constants\";\n\n// An initial state for the reducers to start from\nconst initialStateSearch = { searchField: \"\" };\n\n// The reducer sets the 'searchField' state slice to the input text passed to it\n// from the action payload. Has default parameters, in case none are passed.\nexport const searchRobotsR = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            // Return a new state object assigning the action payload to 'searchField'\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state; // ignore action and return current state\n    }\n};\n\n// An initial state for the requestRobotsR reducer to start from\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: \"\"\n};\n\n// The reducer either sets the 'robots' state slice to the data received from\n// the JSONPayload API, or the 'error' slice if it fails to fetch the data\nexport const requestRobotsR = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false});\n        default:\n            return state; // the previous state\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";  // middleware that handles async actions\nimport \"tachyons\";\nimport './index.css';\nimport App from \"./containers/App\"; // parent of all components\nimport * as serviceWorker from './serviceWorker';\n\n// Import reducers\nimport { searchRobotsR, requestRobotsR } from \"./reducers\";\n\n// Create a 'redux-logger' middleware instance\nconst logger = createLogger();\n\n// Create a root reducer from combined reducers\nconst rootReducer = combineReducers({ searchRobotsR, requestRobotsR });\n\n// Create a Redux store for the app. Pass it the root reducer.\n// Also apply the 'redux-logger' and 'redux-thunk' middleware.\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    // Wrap Provider around App, pass Provider the Redux store\n    // so that it's available to all components\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}