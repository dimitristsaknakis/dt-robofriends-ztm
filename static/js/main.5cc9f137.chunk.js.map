{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAceA,EAZF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACI,4BAAKJ,GACL,2BAAIC,MCqBLI,EA1BE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAMhB,OACI,oCAIQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAKT,GACVA,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCJzBU,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKX,UAAU,OAAf,KACI,2BAEIA,UAAU,mCACVY,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCCXI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEjEJ,EAAMK,WCoBJC,E,YAvBX,WAAYN,GAAQ,IAAD,8BACf,4CAAMA,KAEDO,MAAQ,CACTC,UAAU,GAJC,E,+EASDC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACJ,wDAGJG,KAAKX,MAAMK,a,GApBEQ,aCyDbC,G,kBAnDX,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAkBVe,eAAiB,SAACC,GAEd,EAAKJ,SAAS,CAAElB,YAAasB,EAAMC,OAAOC,SAlB1C,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IALF,E,iFAUE,IAAD,OAEhByB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,+BAUjC,IAAD,EAC2BZ,KAAKJ,MAA7BnB,EADH,EACGA,OAAQM,EADX,EACWA,YAGV8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASlC,EAAYiC,kBAIzD,OAAQvC,EAAOyC,OAGX,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAU3B,OAAQoC,OAT9B,wBAAIxC,UAAU,MAAd,kB,GAnCM6B,cCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.5cc9f137.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email}) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    // // Test out the ErrorBoundary component which encloses CardList (in App)\n    // if (true) {\n    //     throw new Error(\"NoOooOOoOOO!\");\n    // }\n\n    return (\n        <>\n            {\n                // loop through robots to create Card components; using 'map()'\n                // the key prop is so that React can keep track of its array elements\n                robots.map((user, i) => {\n                    return ( // parenthesis when returning on multiple lines\n                        <Card \n                            key={user.id}\n                            id={user.id}\n                            name={user.name}\n                            email={user.email}\n                        />\n                    );\n                })\n            }\n        </>\n    );\n};\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">  {/* Tachyons padding 2 class*/}\n            <input \n                /* adding a class with padding, border, backgrnd color */\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"text\"\n                placeholder=\"search robots\"\n                onChange={searchChange} // the event handler in App\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"600px\" }}>\n            {/* Render whatever children components are enclosed */}\n            {props.children} \n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        // The component's state\n        this.state = {\n            hasError: false\n        };\n    };\n\n    /* componentDidCatch lifecycle hook is similar to 'try/catch' JS block */\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true }); // if error, set 'hasError' to true\n    };\n\n    render() {\n        // if 'hasError' true render a message to user\n        if (this.state.hasError) {\n            return <h1>Oooops. That's not good!</h1>;\n        }\n        // if 'hasError' false render enclosing component(s)\n        return this.props.children;\n    }\n};\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.module.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props); // call parent class (Component) constructor\n        // Adding/creating state for App\n        this.state = {\n            robots: [],  // start out with empty array\n            searchfield: \"\"\n        }\n    };\n\n    /* Lifecycle methods */\n    componentDidMount() {\n        // Get users from online API; set 'robots' state with them\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(response => response.json()) // convert response obj to JSON\n        .then(users => this.setState({ robots: users })); // set 'robots' state to result\n    };\n\n    // Event handler function for input onChange event (passed to SearchBox)\n    // It now has an arrow syntax so that 'this' belongs to App (not to input)\n    onSearchChange = (event) => {\n        // Update the state (setState must be used) before filtering\n        this.setState({ searchfield: event.target.value });\n    };\n\n    render() {\n        const { robots, searchfield } = this.state; // destructure from state\n\n        // Filter robots array, return name of the one typed in searchfield\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n\n        // If fetch() hasn't completed/resolved yet, show 'loading' msg\n        return !robots.length ?\n            <h1 className=\"tc\">Loading...</h1> :\n        (\n            <div className=\"tc\">\n                <h1 className=\"f1\">RoboFriends</h1>\n                {/* Pass event handler function to SearchBox */}\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        {/* Add CardList; it gets passed a 'robots' prop */}\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n};\n\nexport default App; // default for one item; avoids destructuring","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"tachyons\";\nimport './index.css';\nimport App from \"./containers/App\"; // parent of all components\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}